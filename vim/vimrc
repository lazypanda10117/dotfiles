if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'tpope/vim-sensible'
Plug 'junegunn/seoul256.vim'
Plug 'vim-latex/vim-latex'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ycm-core/YouCompleteMe'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

" Basic options
set history=1000
set modelines=0
set hidden
set ruler
set showmode
set showcmd
set novisualbell
set backspace=indent,eol,start
set number
set ttyfast
set lazyredraw
set showmatch
set matchtime=3
set splitbelow
set splitright
set notimeout
set nottimeout
set shiftround
set autoread
set title
set linebreak
set mouse=a
set nojoinspaces

" Unified color scheme (default: dark)
colo seoul256

syntax on

set encoding=utf-8
setglobal fileencoding=utf-8

" replace tabs with spaces
set expandtab
" 1 tab = 2 spaces
set tabstop=2 shiftwidth=2

" when deleting whitespace at the beginning of a line, delete 
" 1 tab worth of spaces (for us this is 2 spaces)
set smarttab

" when creating a new line, copy the indentation from the line above
set autoindent

" Airline {{{
" Required
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1

" Theme
let g:airline_theme = 'luna'
" }}}

" Open nerdtree when no files specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Ctrl+n open nerdtree
nnoremap <C-n> :NERDTreeToggle<CR>

" Close if last window is nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Setting split shortcuts
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Ignore
set wildignore+=*.aux,*.out,*.toc               " Latex
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg  " binary images
set wildignore+=*.sw?                           " Vim swap files
set wildignore+=*.DS_Store                      " OSX

" }}}

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Makes Vim return to the same line when you reopen a file.
if has("autocmd")
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \ exe "normal! g'\"" |
        \ endif
endif

" }}}

" Backups {{{

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set backup
set noswapfile

au BufWritePre * let &bex = '-' . substitute(expand('%:p:h'),'[\,/]','%','g') . strftime("(%d%m%y)%Hh%M") . '~' | " fixes backup//
" au BufWritePre * let &bex = '-' . strftime("%Y%m%d-%H%M%S") . '.vimbackup'

" Undo sentence
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" }}}

" Search {{{
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault

nnoremap <c-f> :noh<return><esc>

" }}}

" ctrl+s to save
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>a

